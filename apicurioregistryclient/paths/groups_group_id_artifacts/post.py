# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from apicurioregistryclient import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apicurioregistryclient import schemas  # noqa: F401

from apicurioregistryclient.model.artifact_content import ArtifactContent
from apicurioregistryclient.model.if_exists import IfExists
from apicurioregistryclient.model.error import Error
from apicurioregistryclient.model.rule_violation_error import RuleViolationError
from apicurioregistryclient.model.artifact_meta_data import ArtifactMetaData

from . import path

# Query params
IfExistsSchema = IfExists
CanonicalSchema = schemas.BoolSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'ifExists': typing.Union[IfExistsSchema, ],
        'canonical': typing.Union[CanonicalSchema, bool, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_if_exists = api_client.QueryParameter(
    name="ifExists",
    style=api_client.ParameterStyle.FORM,
    schema=IfExistsSchema,
    explode=True,
)
request_query_canonical = api_client.QueryParameter(
    name="canonical",
    style=api_client.ParameterStyle.FORM,
    schema=CanonicalSchema,
    explode=True,
)
# Header params
XRegistryArtifactTypeSchema = schemas.StrSchema
XRegistryArtifactIdSchema = schemas.StrSchema
XRegistryVersionSchema = schemas.StrSchema
XRegistryDescriptionSchema = schemas.StrSchema
XRegistryDescriptionEncodedSchema = schemas.StrSchema
XRegistryNameSchema = schemas.StrSchema
XRegistryNameEncodedSchema = schemas.StrSchema
XRegistryContentHashSchema = schemas.StrSchema


class XRegistryHashAlgorithmSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "SHA256": "SHA256",
            "MD5": "MD5",
        }
    
    @schemas.classproperty
    def SHA256(cls):
        return cls("SHA256")
    
    @schemas.classproperty
    def MD5(cls):
        return cls("MD5")
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'X-Registry-ArtifactType': typing.Union[XRegistryArtifactTypeSchema, str, ],
        'X-Registry-ArtifactId': typing.Union[XRegistryArtifactIdSchema, str, ],
        'X-Registry-Version': typing.Union[XRegistryVersionSchema, str, ],
        'X-Registry-Description': typing.Union[XRegistryDescriptionSchema, str, ],
        'X-Registry-Description-Encoded': typing.Union[XRegistryDescriptionEncodedSchema, str, ],
        'X-Registry-Name': typing.Union[XRegistryNameSchema, str, ],
        'X-Registry-Name-Encoded': typing.Union[XRegistryNameEncodedSchema, str, ],
        'X-Registry-Content-Hash': typing.Union[XRegistryContentHashSchema, str, ],
        'X-Registry-Hash-Algorithm': typing.Union[XRegistryHashAlgorithmSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_x_registry_artifact_type = api_client.HeaderParameter(
    name="X-Registry-ArtifactType",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XRegistryArtifactTypeSchema,
)
request_header_x_registry_artifact_id = api_client.HeaderParameter(
    name="X-Registry-ArtifactId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XRegistryArtifactIdSchema,
)
request_header_x_registry_version = api_client.HeaderParameter(
    name="X-Registry-Version",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XRegistryVersionSchema,
)
request_header_x_registry_description = api_client.HeaderParameter(
    name="X-Registry-Description",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XRegistryDescriptionSchema,
)
request_header_x_registry_description_encoded = api_client.HeaderParameter(
    name="X-Registry-Description-Encoded",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XRegistryDescriptionEncodedSchema,
)
request_header_x_registry_name = api_client.HeaderParameter(
    name="X-Registry-Name",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XRegistryNameSchema,
)
request_header_x_registry_name_encoded = api_client.HeaderParameter(
    name="X-Registry-Name-Encoded",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XRegistryNameEncodedSchema,
)
request_header_x_registry_content_hash = api_client.HeaderParameter(
    name="X-Registry-Content-Hash",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XRegistryContentHashSchema,
)
request_header_x_registry_hash_algorithm = api_client.HeaderParameter(
    name="X-Registry-Hash-Algorithm",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XRegistryHashAlgorithmSchema,
)
# Path params
GroupIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'groupId': typing.Union[GroupIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_group_id = api_client.PathParameter(
    name="groupId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=GroupIdSchema,
    required=True,
)
# body param
SchemaForRequestBody = schemas.BinarySchema
SchemaForRequestBodyApplicationCreateExtendedjson = ArtifactContent
SchemaForRequestBodyApplicationVndCreateExtendedjson = ArtifactContent


request_body_body = api_client.RequestBody(
    content={
        '*/*': api_client.MediaType(
            schema=SchemaForRequestBody),
        'application/create.extended+json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationCreateExtendedjson),
        'application/vnd.create.extended+json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationVndCreateExtendedjson),
    },
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = ArtifactMetaData


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor409ResponseBodyApplicationJson = RuleViolationError


@dataclass
class ApiResponseFor409(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor409ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_409 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor409,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor409ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '409': _response_for_409,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _create_artifact_oapg(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, ],
        content_type: typing_extensions.Literal["*/*"] = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _create_artifact_oapg(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationCreateExtendedjson,],
        content_type: typing_extensions.Literal["application/create.extended+json"],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _create_artifact_oapg(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        content_type: typing_extensions.Literal["application/vnd.create.extended+json"],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _create_artifact_oapg(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, SchemaForRequestBodyApplicationCreateExtendedjson,SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def _create_artifact_oapg(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, SchemaForRequestBodyApplicationCreateExtendedjson,SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _create_artifact_oapg(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, SchemaForRequestBodyApplicationCreateExtendedjson,SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _create_artifact_oapg(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, SchemaForRequestBodyApplicationCreateExtendedjson,SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        content_type: str = '*/*',
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Create artifact
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_group_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_if_exists,
            request_query_canonical,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_registry_artifact_type,
            request_header_x_registry_artifact_id,
            request_header_x_registry_version,
            request_header_x_registry_description,
            request_header_x_registry_description_encoded,
            request_header_x_registry_name,
            request_header_x_registry_name_encoded,
            request_header_x_registry_content_hash,
            request_header_x_registry_hash_algorithm,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        serialized_data = request_body_body.serialize(body, content_type)
        _headers.add('Content-Type', content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class CreateArtifact(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def create_artifact(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, ],
        content_type: typing_extensions.Literal["*/*"] = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def create_artifact(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationCreateExtendedjson,],
        content_type: typing_extensions.Literal["application/create.extended+json"],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def create_artifact(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        content_type: typing_extensions.Literal["application/vnd.create.extended+json"],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def create_artifact(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, SchemaForRequestBodyApplicationCreateExtendedjson,SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def create_artifact(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, SchemaForRequestBodyApplicationCreateExtendedjson,SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def create_artifact(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, SchemaForRequestBodyApplicationCreateExtendedjson,SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def create_artifact(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, SchemaForRequestBodyApplicationCreateExtendedjson,SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        content_type: str = '*/*',
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._create_artifact_oapg(
            body=body,
            query_params=query_params,
            header_params=header_params,
            path_params=path_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, ],
        content_type: typing_extensions.Literal["*/*"] = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationCreateExtendedjson,],
        content_type: typing_extensions.Literal["application/create.extended+json"],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        content_type: typing_extensions.Literal["application/vnd.create.extended+json"],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, SchemaForRequestBodyApplicationCreateExtendedjson,SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, SchemaForRequestBodyApplicationCreateExtendedjson,SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, SchemaForRequestBodyApplicationCreateExtendedjson,SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def post(
        self,
        body: typing.Union[SchemaForRequestBody,bytes, io.FileIO, io.BufferedReader, SchemaForRequestBodyApplicationCreateExtendedjson,SchemaForRequestBodyApplicationVndCreateExtendedjson,],
        content_type: str = '*/*',
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._create_artifact_oapg(
            body=body,
            query_params=query_params,
            header_params=header_params,
            path_params=path_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


